/*
 *                    BioJava development code
 *
 * This code may be freely distributed and modified under the
 * terms of the GNU Lesser General Public Licence.  This should
 * be distributed with the code.  If you do not have a copy,
 * see:
 *
 *      http://www.gnu.org/copyleft/lesser.html
 *
 * Copyright for this code is held jointly by the individual
 * authors.  These should be listed in @author doc comments.
 *
 * For more information on the BioJava project and its aims,
 * or to join the biojava-l mailing list, visit the home page
 * at:
 *
 *      http://www.biojava.org/
 *
 */

package org.biojava.servlets.dazzle.datasource;

import java.util.*;
import org.biojava.bio.seq.*;

/**
 * Data source which backs a DAS reference server.  This is a sub-interface
 * of <code>DazzleDataSource</code>, and all methods of that interface must
 * be fully implemented (with the exception of <code>getMapMaster</code>.
 * Please consult the javadoc for <code>DazzleDataSource</code> for more
 * general comments on the implementation of Dazzle plugins.
 *
 * <p>
 * A DAS reference source is very similar in most respects to an annotation
 * source.  In protocol terms, the two substantive differences are:
 * <ul>
 * <li>Reference servers serve DNA sequence as well as features</li>
 * <li>Reference servers offer a list of `entry points' -- the
 * top level sequences in the database</li>
 * </ul>
 * The extra methods on this interface reflect the need to serve
 * this extra data.
 * </p>
 *
 * <p>
 * In addition, reference servers may serve information about how
 * sequence fragments (e.g. clones) are assembled into larger structures
 * (e.g. contigs).  If present, assembly information should be
 * communicated by including BioJava <code>ComponentFeature</code>
 * objects in the feature table.  These are automatically translated
 * by Dazzle into DAS category=component features.
 * </p>
 *
 * @author Thomas Down
 * @version 1.00
 */

public interface DazzleReferenceSource extends DazzleDataSource {
    /**
     * This is ignored for reference servers -- a mapMaster URL
     * is generated automatically by the Servlet.
     */

    public String getMapMaster();

    /**
     * Get the real sequence corresponding to the specified DAS ID.
     * This is used to implement the DAS <code>dna</code> command.
     */

    public Sequence getSequence(String ref)
        throws NoSuchElementException, DataSourceException;

    /**
     * Return a Set<String> listing all the top-level entry points
     * provided by this server.  This might typically be the set of
     * chromosome names.  Note than sub-entry-points are
     * autogenerated by the server using ComponentFeatures.
     */

    public Set getEntryPoints();
} 
