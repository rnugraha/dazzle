/*
 *                    BioJava development code
 *
 * This code may be freely distributed and modified under the
 * terms of the GNU Lesser General Public Licence.  This should
 * be distributed with the code.  If you do not have a copy,
 * see:
 *
 *      http://www.gnu.org/copyleft/lesser.html
 *
 * Copyright for this code is held jointly by the individual
 * authors.  These should be listed in @author doc comments.
 *
 * For more information on the BioJava project and its aims,
 * or to join the biojava-l mailing list, visit the home page
 * at:
 *
 *      http://www.biojava.org/
 *
 * Created on 28.10.2004
 */

package org.biojava.servlets.dazzle.datasource;

import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
import java.io.*;



/** an abstract class to provide a SimpleFeatureSource. Users have to
 * implement the getFeatures method.*/

public abstract class AbstractGFFFeatureSource 
    extends AbstractDazzleDataSource implements GFFFeatureSource
   
{ 
    private String name;
    private String description;
    private String version;
    private String stylesheet;
    private ServletContext context;
    
    /**
     * Basic implementation of the <code>init</code> method, which just records
     * the ServletContext.  Subclasses will normally want to provide their
     * own init method, but this should be chained onto <code>super.init</code>
     * so that the <code>log</code> and <code>getServletContext</code> methods
     * work correctly.
     */
    
    public void init(ServletContext ctx)
        throws DataSourceException
    {
        this.context = ctx;
    }
    

    /** get all features for a given regference
     * @param ref an identifier describing the reference of the
     * features, eg. a sequence identifier or a protein structure
     * @return a list of Feature objects
    */
    
    public GFFFeature[] getFeatures(String ref) 
	throws DataSourceException
    {
	// do something
	return null ;
    }

    /**
	 * Default implementation which returns an autogenerated ID.  This
	 * takes the form __dazzle__&lt;type&gt;_&lt;refseq&gt;_&lt;start&gt;_&lt;stop&gt.
	 * This method should be overriden whereever possible, but it provides a useful
	 * fallback for features which don't have a natural ID.
	 * @param f the feature
	 * @return returns the name of the faeture
	 */

	public String getFeatureID(GFFFeature f) {
		//return f.getName() ;
		

        StringBuffer sb = new StringBuffer();
        sb.append("__dazzle__");
        sb.append(pack(f.getType()));
        sb.append('_');
        sb.append(pack(f.getName()));
        sb.append('_');
        sb.append(f.getStart());
        sb.append('_');
        sb.append(f.getEnd());
        return sb.toString();
		 
	}
	

	private String pack(String s) {
		if (s.indexOf('_') < 0) {
			return s;
		} else {
			StringBuffer sb = new StringBuffer();
			for (int i = 0; i < s.length(); ++i) {
				char c = s.charAt(i);
				if (c != '_') {
					sb.append(c);
				} else {
					sb.append("__");
				}
			}
			return sb.toString();
		}
	}
	
    

    
    /**
     * Return the <code>ServletContext</code> which was attached when this datasource
     * was initialized.
     */
    
    public ServletContext getServletContext() {
        return context;
    }


    /**
     * Log a message via the attached ServletContext.
     */
    
    public void log(String msg) {
        getServletContext().log(msg);
    }
    
    /**
     * Log a message and exception via the attached ServletContext.
     */
    
    public void log(String msg, Throwable t) {
        getServletContext().log(msg, t);
    }
      
    
    /**
     * Default destroy method does nothing.
     */
    
    public void destroy() {
    }
    
    
    /**
     * Set the datasource's name string
     */
    
    public void setName(String s) {
        this.name = s;
    }
    
    public String getName() {
        return name;
    }
    
    /**
     * Set the datasource's description string
     */
    
    public void setDescription(String s) {
        this.description = s;
    }
    
    public String getDescription() {
        return description;
    }
    
    /**
     * Set the datasource's version string
     */
    
    public void setVersion(String s) {
        this.version = s;
    }
    
    public String getVersion() {
        return version;
    }
    
    /**
     * Set the datasource's name stylesheet path
     */
    
    public void setStylesheet(String s) {
        this.stylesheet = s;
    }

    public String getStylesheet() {
        return stylesheet;
    }
    
    public String getDataSourceVersion(){
	return version ;
    }

    public String getDataSourceType(){
	return name ;
    }


    /**
     * Return the set of all type IDs served by this datasource.  This is used
     * by the no-args version of the <code>types</code> DAS command.
     */
    public Set getAllTypes(){
	return null ;
    }

    /**
     * Return the length of the requested sequence
     */

    public int getLandmarkLength(String ref)
        throws DataSourceException, NoSuchElementException
    {
	return -1 ;
    }

    public String getLandmarkVersion(String ref)
        throws DataSourceException, NoSuchElementException 
    {
	return "" ;
	
    }


    public String getMapMaster() {
	return "" ;
    }
    
    


    /**
     * Return a description string for a given type.  May be null (indicating
     * that the description is the same as the type ID).
     */

    public String getTypeDescription(String type) {
        return type;
    }

   
  
    /**
     * Default implementation does nothing and returns <code>false</code>.
     */
    
    public boolean doLink(HttpServletRequest req,
		       HttpServletResponse resp,
		       String field,
		       String id)
	    throws ServletException, IOException, DataSourceException, NoSuchElementException
    {
        return false;
    }

  


}

