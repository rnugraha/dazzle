<?xml version="1.0"?>

<!--

  Ant build file for the entire biojava tree

  see:
  <a href="http://ant.apache.org/">Ant Project Homepage</a>

  targets:

    compile
    compile-tests     compiles JUnit tests
    compile-demos     compiles the demo files
    compile-apps      compiles the application files
    package-biojava   builds the biojava.jar file (default)
    package-demos     builds the demos.jar file
    package-apps      builds the jar.apps file
    runtests          runs all tests (requires Ant 1.6.0 or later)
    runtests-fork     runs all tests in separate virtual machines
    javadocs-biojava  builds biojava API documentation
    javadocs-taglets  builds taglets API documentation
    javadocs-grammars builds grammars API documentation
    javadocs-demos    builds demos API documentation
    javadocs-all      builds API documentation for all the above
    docbook           builds DocBook documentation
    clean             cleans up the build & dist directories
    
  The 'runtests' target can be restricted to portions of the tree, e.g.:
  
       ant -Dtest.subtree=org/biojava/bio/symbol runtests
       ant -Dtest.subtree=org/biojava/bio/seq/** runtests

  author:  Michael Heuer, 
           Keith James (JUnit support, DocBook support)
           Greg Cox (fixed documentation)
           Thomas Down (clean up, remove source-copying steps
  version: $Id: build.xml,v 1.77 2004/01/27 21:31:50 thomasd Exp $

  portions Copyright (c) 1999-2000 The Apache Software Foundation.

-->

<project name="dazzle" default="package-main" basedir=".">

  <!-- Checks environment and setup variables -->
  <target name="init" description="Checks environment and setup variables">
    <tstamp />
    <property name="version" value="live" />

    <property name="build.compiler" value="modern" />

    <property name="classpath" value="jars/biojava.jar:jars/bytecode.jar:jars/servlet-api-2.3.jar:jars/dasmi-model.jar" />

    <property name="readme"         value="./README" />
    <property name="license"        value="./LICENSE" />
    <property name="src.dir"        value="./src" />
    <property name="tests.dir"      value="./tests" />
    <property name="demos.dir"      value="./demos" />
    <property name="apps.dir"       value="./apps" />
    <property name="docs.dir"       value="./docs" />
    <property name="doc.css.file"   value="biojava-doc.css" />
    <property name="reports.dir"    value="./reports" />
    <property name="manifest.dir"   value="./manifest" />
    <property name="resources.dir"  value="./resources" />
    <property name="taglets.dir"    value="./taglets" />
    <property name="webapp.dir"     value="./dazzle-webapp" />
    <property name="thirdparty.dir" value="./thirdparty" />

    <!-- Main build directory -->
    <property name="build.dir" value="./ant-build" />
    <property name="build.classes.dir" value="${build.dir}/classes" />

    <!-- Javac properties -->
    <property name="javac.depend" value="false" />
    <property name="javac.debug" value="true" />
    <property name="javac.deprecation" value="false" />
    <property name="javac.source" value="1.5" />

    <!-- Javadoc properties -->
    <property name="build.dest.docs" value="${build.dir}/docs" />
    <property name="build.dest.doccheck" value="${build.dir}/docs/check" />
    <property name="packages" value="org.*" />

    <!-- Subdirectories for main source and classes -->
    <property name="name.main" value="dazzle" />
    <property name="Name.main" value="Dazzle" />
    <property name="build.dest.main" value="${build.classes.dir}/${name.main}" />
    <property name="build.docs.main" value="${build.dest.docs}/${name.main}" />
    <property name="jar.main" value="${build.dir}/${name.main}.jar" />
    <property name="manifest.file.main" value="${manifest.dir}/${name.main}.txt" />
    <!-- Subdirectory for libraries used during build -->
    <property name="build.lib" value="${build.dir}/lib" />
    
    <!-- Echo information -->
    <echo message="Building ${name.main}-${version}" />
  </target>


  <!--
    Prepare each part of the project.

    Each preparation creates working directories and copies files over.
  -->

  <!-- Prepares the basic stuff -->
  <target name="prepare" depends="init" description="creates basic directories">
    <!-- Creates directories -->
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.lib}" />

    <!-- Copies jars -->
    <copy todir="${build.dir}">
      <fileset dir=".">
        <include name="*.jar" />
      </fileset>
    </copy>

  </target>
  
  <!-- Prepares the biojava source code -->
  <target name="prepare-main" depends="prepare"
  description="Prepares biojava source files">
    <!-- Creates directories -->
    <mkdir dir="${build.dest.main}" />
    <mkdir dir="${build.docs.main}" />
  </target>

  <!-- Prepares the javadocs -->
  <target name="prepare-javadocs" depends="prepare" description="Prepares the javadocs">

    <!-- Creates directories -->
    <mkdir dir="${build.dest.docs}" />
  </target>


  <!-- Compiles the source directory -->
  <target name="compile-main" depends="prepare-main"
  description="Compiles the source directory">
    <javac
      destdir="${build.dest.main}"
      depend="${javac.depend}"
      deprecation="${javac.deprecation}"
      debug="${javac.debug}"
      srcdir="${src.dir}">
      <classpath>
        <pathelement path="${classpath}" />
      </classpath>
      
      <filename name="org/biojava/**/*.java" />
    </javac>
  </target>

  <!--
    Creates the .jar files containing each distributable component.

    This probably just jars up the .class files and any resources as well as
    a manifest for each distributable component.
  -->

  <!-- Creates the biojava package (tests are left in the parallel tree) -->
  
  <!-- this ought to depend on compile-grammars at well, but until conditional
        sablecc works, that's a Bad Idea -->
  
  <target name="package-main" depends="compile-main"
  description="create main class jar file">
    <jar
      jarfile="${jar.main}"
      manifest="${manifest.file.main}"
    >
      <fileset dir="${build.dest.main}" />
      <fileset dir="${resources.dir}" />
    </jar>
  </target>


 <target name="dazzle-war" depends="init,prepare,prepare-main,compile-main,package-main">
      <war 	destfile="dazzle.war" 
      		webxml="${webapp.dir}/WEB-INF/web.xml" 		
         	manifest="${manifest.file.main}" 	
	>
	<lib     dir="${build.dir}"/>
	<lib     dir="${thirdparty.dir}"/>
	<classes dir="${build.classes.dir}"/>
	<fileset dir="${webapp.dir}"/>	   
      </war>
  </target>

  

  <!-- Creates the API documentation -->
  <target name="javadocs-main" depends="prepare-main"
  description="Creates the API documentation">
    <javadoc
      packagenames="${packages}"
      sourcepath="${src.dir}"
      classpath="${classpath}"
      destdir="${build.docs.main}"
      author="true"
      version="true"
      use="true"
      source="1.4"
      windowtitle="${Name.main} API"
      doctitle="${Name.main}"
      maxmemory="96m">
       <link href="http://java.sun.com/j2se/1.4.2/docs/api/" offline="false"/>
    </javadoc>
  </target>


  <!-- Cleans everything -->
  <target name="clean" depends="init"
  description="Cleans everything">
    <delete file="dazzle.war"/>
    <delete dir="${build.dir}" />

  </target>
</project>
